#-- Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
#--
#-- This file contains confidential and proprietary information
#-- of Xilinx, Inc. and is protected under U.S. and
#-- international copyright and other intellectual property
#-- laws.
#--
#-- DISCLAIMER
#-- This disclaimer is not a license and does not grant any
#-- rights to the materials distributed herewith. Except as
#-- otherwise provided in a valid license issued to you by
#-- Xilinx, and to the maximum extent permitted by applicable
#-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
#-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
#-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
#-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
#-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
#-- (2) Xilinx shall not be liable (whether in contract or tort,
#-- including negligence, or under any other theory of
#-- liability) for any loss or damage of any kind or nature
#-- related to, arising under or in connection with these
#-- materials, including for any direct, or any indirect,
#-- special, incidental, or consequential loss or damage
#-- (including loss of data, profits, goodwill, or any type of
#-- loss or damage suffered as a result of any action brought
#-- by a third party) even if such damage or loss was
#-- reasonably foreseeable or Xilinx had been advised of the
#-- possibility of the same.
#--
#-- CRITICAL APPLICATIONS
#-- Xilinx products are not designed or intended to be fail-
#-- safe, or for use in any application requiring fail-safe
#-- performance, such as life-support or safety devices or
#-- systems, Class III medical devices, nuclear facilities,
#-- applications related to the deployment of airbags, or any
#-- other applications that could lead to death, personal
#-- injury, or severe property or environmental damage
#-- (individually and collectively, "Critical
#-- Applications"). Customer assumes the sole risk and
#-- liability of any use of Xilinx products in Critical
#-- Applications, subject only to applicable laws and
#-- regulations governing limitations on product liability.
#--
#-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
#-- PART OF THIS FILE AT ALL TIMES.

###################################################################
##
## Name     : axi_spi
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_spi

## Peripheral Options
OPTION HDL = VHDL
OPTION IMP_NETLIST = TRUE
OPTION IPTYPE = PERIPHERAL
OPTION STYLE = HDL
OPTION IPLEVEL_DRC_PROC = check_iplevel_settings
OPTION DESC = AXI SPI Interface
OPTION LONG_DESC = AXI to Motorola Serial Peripheral Interface (SPI) adapter
OPTION IP_GROUP = Communication Low-Speed:MICROBLAZE:ARM-A9
OPTION DATASHEET_NAME = axi_spi_ds742
OPTION ARCH_SUPPORT_MAP = (spartan6t=PRODUCTION, spartan6=PRODUCTION, spartan6l=PRODUCTION, qspartan6t=PRODUCTION, qspartan6=PRODUCTION, aspartan6t=PRODUCTION, aspartan6=PRODUCTION, virtex6lx=PRODUCTION, virtex6sx=PRODUCTION, virtex6cx=PRODUCTION, virtex6llx=PRODUCTION, virtex6lsx=PRODUCTION, qspartan6l=PRODUCTION, qvirtex6lx=PRODUCTION, qvirtex6sx=PRODUCTION, qvirtex6fx=PRODUCTION, qvirtex6tx=PRODUCTION, virtex7=PRODUCTION, kintex7=PRODUCTION, artix7=PRODUCTION, zynq=PRODUCTION, virtex7l=PRODUCTION, kintex7l=PRODUCTION, aartix7=PRODUCTION, artix7l=PRODUCTION, virtex7ht=PRODUCTION, qvirtex7=PRODUCTION, qkintex7=PRODUCTION, qkintex7l=PRODUCTION, qartix7=PRODUCTION, qartix7l=REMOVED, azynq=PRODUCTION, qzynq=PRODUCTION, qvirtex7l=PRODUCTION)
OPTION RUN_NGCBUILD = FALSE

##IO_INTERFACE IO_IF = spi_0, IO_TYPE = XIL_SPI_V1_hide

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector(31 downto 0), ADDR_TYPE = REGISTER, ASSIGNMENT = REQUIRE, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI, MIN_SIZE = 0x1000
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector(31 downto 0), ADDR_TYPE = REGISTER, ASSIGNMENT = REQUIRE, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_FIFO_EXIST = 1, DT = INTEGER, RANGE = (0:1), PERMIT = BASE_USER, DESC = Include Receive and Transmit FIFOs, VALUES = (0= FALSE , 1= TRUE)
PARAMETER C_SCK_RATIO = 32, DT = INTEGER, RANGE = (2,4,8,16,32,48,64,80,96,112,128,144,160,176,192,208,224,240,256,272,288,304,320,336,352,368,384,400,416,432,448,464,480,496,512,528,544,560,576,592,608,624,640,656,672,688,704,720,736,752,768,784,800,816,832,848,864,880,896,912,928,944,960,976,992,1008,1024,1040,1056,1072,1088,1104,1120,1136,1152,1168,1184,1200,1216,1232,1248,1264,1280,1296,1312,1328,1344,1360,1376,1392,1408,1424,1440,1456,1472,1488,1504,1520,1536,1552,1568,1584,1600,1616,1632,1648,1664,1680,1696,1712,1728,1744,1760,1776,1792,1808,1824,1840,1856,1872,1888,1904,1920,1936,1952,1968,1984,2000,2016,2032,2048), PERMIT = BASE_USER##, IO_IF = spi_0, IO_IS = clk_freq
PARAMETER C_NUM_SS_BITS = 1, DT = INTEGER, RANGE = (1:32), PERMIT = BASE_USER##, IO_IF = spi_0, IO_IS = ss_bits
PARAMETER C_NUM_TRANSFER_BITS = 8, DT = INTEGER, RANGE = (8,16,32), PERMIT = BASE_USER##, IO_IF = spi_0, IO_IS = num_trasfer_bits
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, DT = STRING, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL
PARAMETER C_INSTANCE = axi_spi_inst, DT = STRING

## Ports
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, ASSIGNMENT = REQUIRE, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT SCK_I = "", DIR = I##, IO_IF = spi_0, IO_IS = clk_out_I
PORT SCK_O = "", DIR = O##, IO_IF = spi_0, IO_IS = clk_out_O
PORT SCK_T = "", DIR = O##, IO_IF = spi_0, IO_IS = clk_out_T
PORT MISO_I = "", DIR = I##, IO_IF = spi_0, IO_IS = data_out_I
PORT MISO_O = "", DIR = O##, IO_IF = spi_0, IO_IS = data_out_O
PORT MISO_T = "", DIR = O##, IO_IF = spi_0, IO_IS = data_out_T
PORT MOSI_I = "", DIR = I##, IO_IF = spi_0, IO_IS = data_in_I
PORT MOSI_O = "", DIR = O##, IO_IF = spi_0, IO_IS = data_in_O
PORT MOSI_T = "", DIR = O##, IO_IF = spi_0, IO_IS = data_in_T
PORT SPISEL = "", DIR = I, INITIALVAL = VCC, PERMIT = BASE_USER, DESC = 'Local SPI Slave Select Active LOW Input'##, IO_IF = spi_0, IO_IS = slave_select_n
PORT SS_I = "", DIR = I, VEC = [(C_NUM_SS_BITS-1):0], ENDIAN = LITTLE##, IO_IF = spi_0, IO_IS = chip_select_I
PORT SS_O = "", DIR = O, VEC = [(C_NUM_SS_BITS-1):0], ENDIAN = LITTLE##, IO_IF = spi_0, IO_IS = chip_select_O
PORT SS_T = "", DIR = O##, IO_IF = spi_0, IO_IS = chip_select_T
PORT IP2INTC_Irpt = "", DIR = O, SIGIS = INTERRUPT, SENSITIVITY = LEVEL_HIGH, INTERRUPT_PRIORITY = LOW
##PORT SCK = "", TRI_O = SCK_O, TRI_T = SCK_T, DIR = IO, TRI_I = SCK_I, THREE_STATE = TRUE, PERMIT = BASE_USER, DESC = 'SPI Bus Clock', IO_IF = spi_0, IO_IS = clk_out
##PORT MISO = "", TRI_O = MISO_O, TRI_T = MISO_T, DIR = IO, TRI_I = MISO_I, THREE_STATE = TRUE, PERMIT = BASE_USER, DESC = 'Master In Slave Out', IO_IF = spi_0, IO_IS = data_out
##PORT MOSI = "", TRI_O = MOSI_O, TRI_T = MOSI_T, DIR = IO, TRI_I = MOSI_I, THREE_STATE = TRUE, PERMIT = BASE_USER, DESC = 'Master Out Slave In', IO_IF = spi_0, IO_IS = data_in
##PORT SS = "", TRI_O = SS_O, TRI_T = SS_T, DIR = IO, VEC = [(C_NUM_SS_BITS-1):0], ENDIAN = LITTLE, TRI_I = SS_I, THREE_STATE = TRUE, PERMIT = BASE_USER, DESC = 'Slave Select Vector', IO_IF = spi_0, IO_IS = chip_select

END
